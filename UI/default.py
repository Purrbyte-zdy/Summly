# Form implementation generated from reading ui file 'default.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    """主窗口UI类，定义了应用程序的界面布局和元素属性"""

    def setupUi(self, MainWindow):
        """初始化UI元素，设置布局、样式和属性

        Args:
            MainWindow: 主窗口对象，作为所有UI元素的父容器
        """
        # 主窗口基本设置
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(914, 600)  # 设置窗口初始大小

        # 中央部件（所有UI元素的容器）
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        # 设置中央部件背景色为深灰色（#292a2d）
        self._set_dark_palette(self.centralwidget, bg_color=(41, 42, 45))
        self.centralwidget.setObjectName("centralwidget")

        # -------------------------- 文件拖放区域 --------------------------
        self.fileDropArea = QtWidgets.QWidget(parent=self.centralwidget)
        self.fileDropArea.setGeometry(QtCore.QRect(9, 9, 891, 81))  # 位置和大小
        # 设置拖放区域背景色为更深的灰色（#212327）
        self._set_dark_palette(self.fileDropArea, bg_color=(33, 35, 39))
        # 设置样式：深灰色背景、白色虚线边框、圆角
        self.fileDropArea.setStyleSheet("""
            background-color: #212327;
            border: 3px dashed #f0f0f0;
            border-radius: 150px;
        """)
        self.fileDropArea.setObjectName("fileDropArea")

        # 拖放区域的垂直布局
        self.dropAreaLayout = QtWidgets.QVBoxLayout(self.fileDropArea)
        self.dropAreaLayout.setContentsMargins(0, 0, 0, 0)
        self.dropAreaLayout.setObjectName("dropAreaLayout")

        # 拖放提示标签
        self.dropHintLabel = QtWidgets.QLabel(parent=self.fileDropArea)
        self._set_label_palette(self.dropHintLabel, text_color=(255, 255, 255))  # 白色文本
        # 设置字体：思源宋体 SemiBold，22号，加粗
        font = QtGui.QFont()
        font.setFamily("思源宋体 SemiBold")
        font.setPointSize(22)
        font.setBold(True)
        self.dropHintLabel.setFont(font)
        self.dropHintLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)  # 居中对齐
        self.dropHintLabel.setObjectName("dropHintLabel")
        self.dropAreaLayout.addWidget(self.dropHintLabel)

        # -------------------------- 左侧文件处理队列 --------------------------
        # 待处理文件列表
        self.processingFileList = QtWidgets.QListWidget(parent=self.centralwidget)
        self.processingFileList.setGeometry(QtCore.QRect(10, 100, 271, 411))  # 位置和大小
        self._set_dark_palette(self.processingFileList, bg_color=(33, 35, 39))  # 深灰色背景
        self.processingFileList.viewport().setProperty("cursor",
                                                       QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))  # 等待光标
        self.processingFileList.setObjectName("processingFileList")

        # 处理队列标题标签
        self.processingQueueLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.processingQueueLabel.setGeometry(QtCore.QRect(10, 100, 271, 61))  # 位置和大小
        self._set_label_palette(self.processingQueueLabel, text_color=(255, 255, 255))  # 白色文本
        # 设置字体：思源宋体 Heavy，24号，加粗
        font = QtGui.QFont()
        font.setFamily("思源宋体 Heavy")
        font.setPointSize(24)
        font.setBold(True)
        self.processingQueueLabel.setFont(font)
        self.processingQueueLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)  # 居中对齐
        self.processingQueueLabel.setObjectName("processingQueueLabel")

        # -------------------------- 右侧处理日志区域 --------------------------
        # 日志滚动区域（支持滚动查看大量日志）
        self.processLogScrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.processLogScrollArea.setGeometry(QtCore.QRect(299, 169, 601, 351))  # 位置和大小
        self.processLogScrollArea.setWidgetResizable(True)  # 自适应大小
        self.processLogScrollArea.setObjectName("processLogScrollArea")

        # 滚动区域内容容器
        self.logScrollContent = QtWidgets.QWidget()
        self.logScrollContent.setGeometry(QtCore.QRect(0, 0, 599, 349))
        self.logScrollContent.setObjectName("logScrollContent")

        # 处理日志列表（显示解析过程或结果）
        self.processLogList = QtWidgets.QListWidget(parent=self.logScrollContent)
        self.processLogList.setGeometry(QtCore.QRect(0, 0, 581, 341))  # 位置和大小
        self._set_dark_palette(self.processLogList, bg_color=(33, 35, 39))  # 深灰色背景
        self.processLogList.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))  # 等待光标
        self.processLogList.setObjectName("processLogList")

        # 日志列表垂直滚动条
        self.logScrollBar = QtWidgets.QScrollBar(parent=self.logScrollContent)
        self.logScrollBar.setGeometry(QtCore.QRect(580, 0, 21, 341))  # 位置和大小
        self.logScrollBar.setStyleSheet("background:rgb(33, 35, 39)")  # 滚动条背景色
        self.logScrollBar.setOrientation(QtCore.Qt.Orientation.Vertical)  # 垂直方向
        self.logScrollBar.setObjectName("logScrollBar")

        self.processLogScrollArea.setWidget(self.logScrollContent)

        # 日志区域标题标签
        self.processLogLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.processLogLabel.setGeometry(QtCore.QRect(527, 100, 271, 61))  # 位置和大小
        self._set_label_palette(self.processLogLabel, text_color=(255, 255, 255))  # 白色文本
        # 设置字体：思源宋体 Heavy，24号，加粗
        font = QtGui.QFont()
        font.setFamily("思源宋体 Heavy")
        font.setPointSize(24)
        font.setBold(True)
        self.processLogLabel.setFont(font)
        self.processLogLabel.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.processLogLabel.setObjectName("processLogLabel")

        # -------------------------- 进度条和按钮 --------------------------
        # 处理进度条（当前隐藏，高度为0）
        self.processProgressBar = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.processProgressBar.setGeometry(QtCore.QRect(10, 570, 891, 0))  # 位置和大小（高度0表示隐藏）
        self._set_label_palette(self.processProgressBar, text_color=(255, 255, 255))  # 白色文本
        self.processProgressBar.setProperty("value", 0)  # 初始进度0%
        self.processProgressBar.setObjectName("processProgressBar")

        # 开始处理按钮
        self.startProcessButton = QtWidgets.QToolButton(parent=self.centralwidget)
        self.startProcessButton.setGeometry(QtCore.QRect(10, 530, 271, 31))  # 位置和大小
        # 设置按钮样式：灰色背景（#494949），白色文本
        self._set_button_palette(self.startProcessButton, bg_color=(73, 73, 73), text_color=(255, 255, 255))
        # 设置字体：思源宋体 Heavy，16号
        font = QtGui.QFont()
        font.setFamily("思源宋体 Heavy")
        font.setPointSize(16)
        self.startProcessButton.setFont(font)
        self.startProcessButton.setStyleSheet("background-color:#494949")
        self.startProcessButton.setObjectName("startProcessButton")

        # 设置中央部件为主窗口的中心部件
        MainWindow.setCentralWidget(self.centralwidget)

        # 翻译UI文本（设置显示内容）
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        """设置UI元素的文本内容（支持国际化翻译）"""
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Summly v1.0"))  # 窗口标题
        self.dropHintLabel.setText(
            _translate("MainWindow", "拖放文件到此处                                   或点击选择文件"))  # 拖放提示
        self.processingQueueLabel.setText(_translate("MainWindow", "文件处理队列"))  # 左侧列表标题
        self.processLogLabel.setText(_translate("MainWindow", "解析过程"))  # 右侧日志标题
        self.startProcessButton.setText(_translate("MainWindow", "开始！"))  # 按钮文本

    # -------------------------- 工具方法（简化重复代码） --------------------------
    def _set_dark_palette(self, widget, bg_color):
        """设置部件的深色调色板（背景色）

        Args:
            widget: 需要设置的部件
            bg_color: 背景色RGB元组 (r, g, b)
        """
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(*bg_color))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        # 为所有状态（激活、未激活、禁用）设置背景色
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        widget.setPalette(palette)

    def _set_label_palette(self, label, text_color):
        """设置标签的调色板（文本色）

        Args:
            label: QLabel对象
            text_color: 文本色RGB元组 (r, g, b)
        """
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(*text_color))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        # 为激活和未激活状态设置文本色
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        label.setPalette(palette)

    def _set_button_palette(self, button, bg_color, text_color):
        """设置按钮的调色板（背景色和文本色）

        Args:
            button: 按钮部件
            bg_color: 背景色RGB元组 (r, g, b)
            text_color: 文本色RGB元组 (r, g, b)
        """
        palette = QtGui.QPalette()
        # 设置文本色
        text_brush = QtGui.QBrush(QtGui.QColor(*text_color))
        text_brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, text_brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, text_brush)
        # 设置背景色
        bg_brush = QtGui.QBrush(QtGui.QColor(*bg_color))
        bg_brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, bg_brush)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, bg_brush)
        button.setPalette(palette)
